source $VIMRUNTIME/vimrc_example.vim

" Set up leader keys for mappings
let mapleader=","
let maplocalleader = "_"

" Set up shortcuts for editing my vimrc
nnoremap <Leader>ev :50vsplit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>

" Backup and swap directories
set swapfile
set writebackup
set backup
set backupcopy=auto
set undofile
if has("win32")
    set backupdir=~/vimfiles/backup,.
    set directory=~/vimfiles/swap,.
    set undodir=~/vimfiles/undo/,.
    set viewdir=~/vimfiles/view/,.
else
    set backupdir=~/.vim/backup,.
    set directory=~/.vim/swap,.
    set undodir=~/.vim/undo/,.
    set viewdir=~/.vim/view/,.
endif

" Usual tab settings
" set tabstop=4
" set shiftwidth=4
" set softtabstop=4
" set expandtab

" Useful for long lines
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set nowrap

syntax on
set autoindent
set smartindent

set incsearch
set ignorecase
set smartcase
set hlsearch
set showmatch
nnoremap / /\v
vnoremap / /\v
nnoremap <Leader><Leader> :nohlsearch<CR>

set foldmethod=manual

set number
set relativenumber

" augroup numbering
    " autocmd!
    " autocmd InsertEnter * set norelativenumber
    " autocmd InsertLeave * set relativenumber
" augroup END

" set textwidth=79
set textwidth=0
set colorcolumn=+1

set visualbell
set t_vb=

" Don't try to fix the last line of the file by adding a newline
set noendofline
set nofixendofline

" For use with :set list
set listchars=space:␣,eol:↓,tab:→—,trail:·,precedes:«,extends:»
nnoremap <Leader>. :set list!<CR>

" Auto-select regexp engine for syntax highlighting
" Fixes long hangs for TypeScript files
set regexpengine=0

" Status line
" %-0{minwid}.{maxwid}{item}
set statusline=%<%f\ %h%w%q%m%r%=%-15.([%l:%c/%L][%p%%]%)%y
set laststatus=2
set showmode " Show the current mode
set showcmd " Show typed keys in status line

set termguicolors
colorscheme catppuccin_mocha

" Buffer navigation
nnoremap <Leader>] :bnext<CR>
nnoremap <Leader>[ :bprevious<CR>

" fzf
if executable('fzf')
  nnoremap <Leader>f :FZF!<CR>

  command! -bang FZFB
    \ call fzf#run(
      \ fzf#wrap({
        \ 'source': map(getbufinfo({'buflisted': 1}), {_, buf -> buf.name != "" ? buf.name : buf.bufnr }),
        \ 'sink': 'b'
      \ }, <bang>0)
    \ )
  nnoremap <Leader>b :FZFB!<CR>
endif

" Plugin loading
packloadall
silent! helptags ALL

" Make a new scratch buffer
function! MakeScratch()
  let ft = input("File type: ", "sql")
  try
    enew
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal noswapfile

    let &l:filetype = ft
  endtry
endfunction

nnoremap <Leader>sc :call MakeScratch()<CR>

" Source local project settings if available
if filereadable('./saeid/project.vim')
  source ./saeid/project.vim
endif

source ~/.vim/coc-mappings.vim

highlight Normal guibg=NONE
highlight CocFloating ctermbg=DarkGrey
highlight CocMenuSel ctermfg=Blue
highlight CocSearch ctermfg=Cyan

